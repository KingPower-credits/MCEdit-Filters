# This is filter that generates buildings that can be found in a NPC Village
# This filter was created by Podshot
# If you redistribute/modify, please give credit to Podshot
# ================================================================
# Have an idea? Can you improve this code? Fork the Github!
# Link: https://github.com/Podshot/MCEdit-Filters

from pymclevel import alphaMaterials
from pymclevel import MCSchematic
from pymclevel import TileEntity
from pymclevel import TAG_List
from pymclevel import TAG_Byte
from pymclevel import TAG_Int
from pymclevel import TAG_Compound
from pymclevel import TAG_Short
from pymclevel import TAG_Double
from pymclevel import TAG_Float
from pymclevel import TAG_String
from math import sqrt
from numpy import *
import random
import time

displayName = "Generate Structures"

Build = {
    "Blacksmith": 1,
    "Church": 2,
    "Library": 3,
    "House #1": 4,
    "House #2": 5,
    "House #3": 6,
    "Fountain": 7,
    "Farm": 8,
    }

inputs = (
        ("Building", tuple(sorted(Build.keys()))),
        ("Note: This filter does not generate doors", "label"),
)

def library():
    e = MCSchematic(shape=(9,9,8),filename='')
    e._Blocks = [[[0,0,0,0,0,0,0,0,0],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[0,67,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[4,4,4,4,4,4,4,4,4],[4,0,0,53,53,53,53,5,4],[4,0,0,0,85,0,85,53,4],[4,0,0,0,0,0,0,0,4],[4,0,0,0,0,0,0,58,4],[4,64,4,4,4,4,4,4,4],[0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[4,5,102,102,5,102,102,5,4],[5,0,0,0,0,0,0,0,5],[102,0,0,0,72,0,72,0,102],[102,0,0,0,0,0,0,0,102],[5,0,0,0,0,0,0,0,5],[4,64,5,5,102,102,102,5,4],[0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[4,5,5,5,5,5,5,5,4],[5,47,47,47,47,47,47,47,5],[102,0,0,0,0,0,0,0,102],[102,0,0,0,0,0,0,0,102],[5,0,0,0,0,0,0,0,5],[4,5,5,5,102,102,102,5,4],[0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[4,5,5,5,5,5,5,5,4],[5,5,5,5,5,5,5,5,5],[5,0,0,0,0,0,0,0,5],[5,0,0,0,0,0,0,0,5],[5,5,5,5,5,5,5,5,5],[4,5,5,5,5,5,5,5,4],[0,0,0,0,0,0,0,0,0]],[[53,53,53,53,53,53,53,53,53],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[53,53,53,53,53,53,53,53,53]],[[0,0,0,0,0,0,0,0,0],[53,53,53,53,53,53,53,53,53],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[53,53,53,53,53,53,53,53,53],[0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[53,53,53,53,53,53,53,53,53],[4,4,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4],[53,53,53,53,53,53,53,53,53],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[53,53,53,53,53,53,53,53,53],[53,53,53,53,53,53,53,53,53],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]]
    e.root_tag['Data'] = pymclevel.nbt.TAG_Byte_Array([[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,3,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,3,3,3,3,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,8,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]],[[2,2,2,2,2,2,2,2,2],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,3]],[[0,0,0,0,0,0,0,0,0],[2,2,2,2,2,2,2,2,2],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,3],[0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[2,2,2,2,2,2,2,2,2],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,3],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]])
    return e

def farm():
    e = MCSchematic(shape=(9,2,7),filename='')
    e._Blocks = [[[17,17,17,17,17,17,17,17,17],[17,60,60,60,60,60,60,60,17],[17,60,60,60,60,60,60,60,17],[17,9,9,9,9,9,9,9,17],[17,60,60,60,60,60,60,60,17],[17,60,60,60,60,60,60,60,17],[17,17,17,17,17,17,17,17,17]],[[0,0,0,0,0,0,0,0,0],[0,59,59,59,59,59,59,59,0],[0,59,59,59,59,59,59,59,0],[0,0,0,0,0,0,0,0,0],[0,141,141,141,141,141,141,141,0],[0,141,141,141,141,141,141,141,0],[0,0,0,0,0,0,0,0,0]]]
    e.root_tag['Data'] = pymclevel.nbt.TAG_Byte_Array([[[0,0,0,0,0,0,0,0,0],[0,7,0,7,0,0,7,0,0],[0,0,0,0,0,0,7,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,7,0,7,0,7,0],[0,0,0,0,7,7,0,0,0],[0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[0,7,6,6,3,2,2,2,0],[0,6,2,6,3,5,4,6,0],[0,0,0,0,0,0,0,0,0],[0,2,6,4,3,5,2,5,0],[0,5,5,7,5,7,5,6,0],[0,0,0,0,0,0,0,0,0]]])
    return e

def houseOne():
    e = MCSchematic(shape=(5,5,6),filename='')
    e._Blocks = [[[4,4,4,4,4],[4,4,4,4,4],[4,4,4,4,4],[4,4,4,4,4],[4,4,4,4,4],[0,0,67,0,0]],[[4,5,5,5,4],[5,0,0,0,5],[5,0,0,0,5],[5,0,0,0,5],[4,5,0,5,4],[0,0,0,0,0]],[[4,5,102,5,4],[5,0,0,0,5],[102,0,0,0,102],[5,0,0,0,5],[4,5,0,5,4],[0,0,0,0,0]],[[4,5,5,5,4],[5,0,0,0,5],[5,0,0,0,5],[5,0,50,0,5],[4,5,5,5,4],[0,0,0,0,0]],[[17,17,17,17,17],[17,5,5,5,17],[17,5,5,5,17],[17,5,5,5,17],[17,17,17,17,17],[0,0,0,0,0]]]
    e.root_tag['Data'] = pymclevel.nbt.TAG_Byte_Array([[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,3,0,0]],[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]],[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]],[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,4,0,0],[0,0,0,0,0],[0,0,0,0,0]],[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]])
    return e
    
def perform(level, box, options):
    method = "Generator"
    findIn(level, box, options)
    print '%s: Ended: %s' % (method, time.ctime())
    level.markDirtyBox(box)

h1 = houseOne()
fm = farm()
libr = library()
def lib(level,dest):
    vec = Vector(0,1,0)
    level.copyBlocksFrom(libr,libr.bounds,vec + dest)
def farms(level,dest):
    vec = Vector(0,1,0)
    level.copyBlocksFrom(fm,fm.bounds,vec + dest)
def houseo(level,dest):
    vec = Vector(0,1,0)
    level.copyBlockFrom(h1,h1.bounds,vec + dest)
def findIn(level, box, options):
    build = options["Building"]
    method = "Generator"
    print '%s: Started: %s' % (method, time.ctime())
    print '%s: Choose building: %s' % (method, build)
    # Start input finder
    if build == "1":
        print 'Test'
    elif build == "2":
        print 'Choose'
    elif build == "3":
        lib(level,[box.minx,box.miny,box.minz])
    elif build == "House #1":
        houseo(level,[box.minx,box.miny,box.minz])
    elif build == "5":
        print 'Choose House #2'
    elif build == "6":
        print 'Choose House #3'
    elif build == "7":
        print 'Choose Fountain'
    elif build == "Farm":
        farms(level,[box.minx,box.miny,box.minz])
